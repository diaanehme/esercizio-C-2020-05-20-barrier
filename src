// Diaa Nehme  IN0500345  esercizio20200422

#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#include<sys/types.h>
#include<sys/wait.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<sys/mman.h>

#include<errno.h>
#include<semaphore.h>
#include<pthread.h>

#define N 10

sem_t mutex;
sem_t barrier;

int count;
int number_of_threads = N;

#define CHECK_ERR(a, msg) {if(a == -1){perror(msg); exit(EXIT_FAILURE);}}

void * thread_function(void * arg){
	printf("rendezvous\n");
	
	if(sem_wait(&mutex) == -1){
		perror("sem_wait()");
		exit(EXIT_FAILURE);
	}
	count++;

	if(sem_post(&mutex) == -1){
		perror("sem_post()");
		exit(EXIT_FAILURE);
	}
	
	if(count == number_of_threads){
		if(sem_post(&barrier) == -1){
			perror("sem_post()");
			exit(EXIT_FAILURE);
		}		
	}

	if(sem_wait(&barrier) == -1){
		perror("sem_wait()");
		exit(EXIT_FAILURE);
	}

	if(sem_post(&barrier) == -1){
		perror("sem_post()");
		exit(EXIT_FAILURE);
	}

	printf("critical point\n");	
	
	return NULL;
}

int main(){
	int s;
	pthread_t threads[N];

	s = sem_init(&mutex, 0, 1);
	CHECK_ERR(s, "sem_init")

	s = sem_init(&barrier, 0, 0);
	CHECK_ERR(s, "sem_init")

	for(int i = 0; i < number_of_threads; i++){
		s = pthread_create(&threads[i], NULL, thread_function, NULL);
		if(s != 0){
			perror("pthread_create()");
			exit(EXIT_FAILURE);
		}


	for(int i = 0; i < number_of_threads; i++){
		s = pthread_join(threads[i], NULL);
		if(s != 0){
			perror("pthread_join()");
			exit(EXIT_FAILURE);
		}
	}
	
	s = sem_destroy(&mutex);
	CHECK_ERR(s, "sem_destroy()")


	s = sem_destroy(&barrier);
	CHECK_ERR(s, "sem_destroy()")

	printf("BYE!");

	return 0;
  }
}
